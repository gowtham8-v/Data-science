{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17rpim-rMTey18KIbhoGPJqf-icN4pvyM","timestamp":1746851601269}],"authorship_tag":"ABX9TyM8AwbKgnkKGnhSaAGYyJvH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"NXp6rAsDdHlx","executionInfo":{"status":"ok","timestamp":1746851481184,"user_tz":-330,"elapsed":12082,"user":{"displayName":"Gowtham V","userId":"09695263026029003744"}},"outputId":"70bf5c4d-5401-4dbf-db9c-b488d9a07f54"},"outputs":[{"output_type":"stream","name":"stdout","text":["   St_Case StateName     County  CountyNumber            CrashDateTime  \\\n","0    10001   Alabama     WALKER         127.0  2015-01-01 07:40:11.136   \n","1    10002   Alabama  LIMESTONE          83.0  2015-01-02 03:13:16.800   \n","2    10003   Alabama    BULLOCK          11.0  2015-01-01 06:25:54.688   \n","3    10004   Alabama       DALE          45.0  2015-01-04 05:56:20.096   \n","4    10005   Alabama       DALE          45.0  2015-01-07 12:08:42.752   \n","\n","   Fatals  Peds  Persons  TotalVehicles  \n","0       1     0        1              1  \n","1       1     0        1              1  \n","2       1     0        2              1  \n","3       1     0        1              1  \n","4       1     0        2              2  \n","St_Case             0\n","StateName           0\n","County            742\n","CountyNumber      742\n","CrashDateTime    2146\n","Fatals              0\n","Peds                0\n","Persons             0\n","TotalVehicles       0\n","dtype: int64\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-1-50364a33f78a>:26: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['CrashDateTime'] = pd.to_datetime(data['CrashDateTime'])\n","<ipython-input-1-50364a33f78a>:29: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['Year'] = data['CrashDateTime'].dt.year\n","<ipython-input-1-50364a33f78a>:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['Month'] = data['CrashDateTime'].dt.month\n","<ipython-input-1-50364a33f78a>:31: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  data['Day'] = data['CrashDateTime'].dt.day\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9998412278380524\n","Confusion Matrix:\n","[[52685     0     0     0     0     0     0]\n"," [    0  3352     0     0     0     0     0]\n"," [    0     0   491     0     0     0     0]\n"," [    0     0     1   122     0     0     0]\n"," [    0     0     1     3    24     0     0]\n"," [    0     0     0     1     1     2     0]\n"," [    0     0     0     1     1     0     0]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           1       1.00      1.00      1.00     52685\n","           2       1.00      1.00      1.00      3352\n","           3       1.00      1.00      1.00       491\n","           4       0.96      0.99      0.98       123\n","           5       0.92      0.86      0.89        28\n","           6       1.00      0.50      0.67         4\n","           8       0.00      0.00      0.00         2\n","\n","    accuracy                           1.00     56685\n","   macro avg       0.84      0.76      0.79     56685\n","weighted avg       1.00      1.00      1.00     56685\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Importing necessary libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","\n","# Load the dataset\n","#url = 'FatalityCrashData.csv.csv'  # Replace with the path or URL to your dataset\n","data = pd.read_csv('FatalityCrashData.csv')\n","\n","# Display first few rows of the dataset\n","print(data.head())\n","\n","# Data Preprocessing\n","# Check for missing values\n","print(data.isnull().sum())\n","\n","# Fill or drop missing values (depending on the dataset)\n","data = data.dropna()  # or data.fillna(method='ffill')\n","\n","# Convert 'CrashDateTime' to datetime format\n","data['CrashDateTime'] = pd.to_datetime(data['CrashDateTime'])\n","\n","# Feature Engineering (example: extracting day, month, hour from 'CrashDateTime')\n","data['Year'] = data['CrashDateTime'].dt.year\n","data['Month'] = data['CrashDateTime'].dt.month\n","data['Day'] = data['CrashDateTime'].dt.day\n","data['Hour'] = data['CrashDateTime'].dt.hour\n","\n","# Selecting relevant features for prediction (you can add more features as per your project)\n","features = ['Fatals', 'Peds', 'Persons', 'TotalVehicles', 'Year', 'Month', 'Day', 'Hour']\n","X = data[features]\n","y = data['Fatals']  # Target: Fatals or any other column you want to predict\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Feature Scaling (if needed)\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","# Model - Random Forest Classifier (you can choose another model)\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","model.fit(X_train_scaled, y_train)\n","\n","# Predictions\n","y_pred = model.predict(X_test_scaled)\n","\n","# Evaluate the model\n","print('Accuracy:', accuracy_score(y_test, y_pred))\n","print('Confusion Matrix:')\n","print(confusion_matrix(y_test, y_pred))\n","print('Classification Report:')\n","print(classification_report(y_test, y_pred))\n","\n","# Visualizations\n","# Plot feature importance\n","features_importance = model.feature_importances_\n","feature_names = X.columns\n","plt.figure(figsize=(10, 6))\n","plt.barh(feature_names, features_importance)\n","plt.title('Feature Importance')\n","plt.xlabel('Importance')\n","plt.ylabel('Feature')\n","plt.show()\n","\n","# You can further create additional visualizations (e.g., accident trends over time, etc.)"]}]}